diff --git a/Makefile b/Makefile
index a6fd995..9689d3f 100644
--- a/Makefile
+++ b/Makefile
@@ -910,7 +910,7 @@ export mod_sign_cmd
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ uthreads/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/Testcases/.gitignore b/Testcases/.gitignore
deleted file mode 100644
index 9be269a..0000000
--- a/Testcases/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-bin/*
-!.gitignore
\ No newline at end of file
diff --git a/Testcases/dining_philosophers_pthread.c b/Testcases/dining_philosophers_pthread.c
deleted file mode 100644
index ab372f2..0000000
--- a/Testcases/dining_philosophers_pthread.c
+++ /dev/null
@@ -1,63 +0,0 @@
-#include <stdio.h>
-#include <stdlib.h>
-#include <unistd.h>
-#include <pthread.h>
-
-void *func(int n);
-pthread_t philosopher[5];
-pthread_mutex_t chopstick[5];
-
-int main()
-{
-	int i,k;
-	void *msg;
-	for(i=1;i<=5;i++)
-	{
-		k=pthread_mutex_init(&chopstick[i],NULL);
-		if(k==-1)
-		{
-			printf("\n Mutex initialization failed");
-			exit(1);
-		}
-	}
-	for(i=1;i<=5;i++)
-	{
-		k=pthread_create(&philosopher[i],NULL,(void *)func,(int *)i);
-		if(k!=0)
-		{
-			printf("\n Thread creation error \n");
-			exit(1);
-		}
-	}
-	for(i=1;i<=5;i++)
-	{
-		k=pthread_join(philosopher[i],&msg);
-		if(k!=0)
-		{
-			printf("\n Thread join failed \n");
-			exit(1);
-		}
-	}
-	for(i=1;i<=5;i++)
-	{
-		k=pthread_mutex_destroy(&chopstick[i]);
-		if(k!=0)
-		{
-			printf("\n Mutex Destroyed \n");
-			exit(1);
-		}
-	}
-	return 0;
-}
-
-void *func(int n)
-{
-	printf("\nPhilosopher %d is thinking ",n);
-	pthread_mutex_lock(&chopstick[n]);
-	pthread_mutex_lock(&chopstick[(n+1)%5]);
-	printf("\nPhilosopher %d is eating ",n);
-	sleep(1);
-	pthread_mutex_unlock(&chopstick[n]);
-	pthread_mutex_unlock(&chopstick[(n+1)%5]);
-	printf("\nPhilosopher %d Finished eating ",n);
-}
\ No newline at end of file
diff --git a/Testcases/dining_philosophers_uthread.c b/Testcases/dining_philosophers_uthread.c
deleted file mode 100644
index 58c02ff..0000000
--- a/Testcases/dining_philosophers_uthread.c
+++ /dev/null
@@ -1,62 +0,0 @@
-#include <stdio.h>
-#include <stdlib.h>
-#include "uthread.h"
-
-void func(void* temp);
-int chopstick[5];
-
-int main()
-{
-	int i,k;
-	int threads[5];
-	void *msg;
-	for(i=0;i<5;i++)
-	{
-		chopstick[i]=init_mutex();
-		if(chopstick[i] < 1 || chopstick[i] > 100)
-		{
-			printf("\n Mutex initialization failed");
-			exit(1);
-		}
-	}
-	for(i=0;i<5;i++)
-	{
-		threads[i] = i;
-		k=uthread_create(&func,&threads[i]);
-		if(!k)
-		{
-			printf("\n Thread creation error \n");
-			exit(1);
-		}
-	}
-	
-	k=uthread_wait();
-	if(k)
-	{
-		printf("\n uthread_wait error\n");
-	}
-
-	for(i=0;i<5;i++)
-	{
-		k=destroy_mutex(chopstick[i]);
-		if(k)
-		{
-			printf("\n Mutex not Destroyed \n");
-		}
-	}
-	return 0;
-}
-
-void func(void* temp)
-{
-	int n = *(int *)temp;
-	printf("\n Philosopher %d is thinking ",n);
-	lock_mutex(chopstick[n]);
-	lock_mutex(chopstick[(n+1)%5]);
-	printf("\n Philosopher %d is eating ",n);
-	sleep(1);
-	unlock_mutex(chopstick[n]);
-	unlock_mutex(chopstick[(n+1)%5]);
-	printf("\n Philosopher %d Finished eating ",n);
-	uthread_exit();
-}
\ No newline at end of file
diff --git a/Testcases/fork_grep.c b/Testcases/fork_grep.c
deleted file mode 100644
index ba0f281..0000000
--- a/Testcases/fork_grep.c
+++ /dev/null
@@ -1,23 +0,0 @@
-#include <stdio.h>
-#include <stdlib.h>
-#include <unistd.h>
-
-int main()
-{
-	int count1 = 0 ;
-	while(count1 < 1000){
-		count1++;
-		int pid = fork();
-		if(pid==0){
-			//code for child
-			int count = 1;
-			int i;
-			for (i = 0; i < 100; ++i)
-			{
-				count*=i;
-			}
-			exit(0);
-		}
-	}
-	waitpid(-1,NULL,0);
-}
\ No newline at end of file
diff --git a/Testcases/grep.c b/Testcases/grep.c
deleted file mode 100644
index 8ceb445..0000000
--- a/Testcases/grep.c
+++ /dev/null
@@ -1,50 +0,0 @@
-#include <stdio.h>
-#include <unistd.h>
-#include <stdlib.h>
-#include <sys/types.h> 
-#include <sys/stat.h>
-#include <unistd.h>
-#include <string.h>
-#include <fcntl.h>
-
-void match_pattern(char *argv[])
-{
-    int fd,r,j=0;
-    char temp,line[100];
-    if((fd=open(argv[2],O_RDONLY)) != -1)
-    {
-        while((r=read(fd,&temp,sizeof(char)))!= 0)
-        {
-            if(temp!='\n')
-            {
-                line[j]=temp;
-                j++;
-            }
-            else
-            {
-                line[j]='\0';
-                if(strstr(line,argv[1])!=NULL)
-                    printf("%s\n",line);
-                memset(line,0,sizeof(line));
-                j=0;
-            }
-
-        }
-    }   
-}
-
-int main(int argc,char *argv[])
-{
-    struct stat stt;
-    if(argc==3)
-    {
-        if(stat(argv[2],&stt)==0)
-            match_pattern(argv);
-        else 
-        {
-            perror("stat()");
-            exit(1);
-        }
-    }
-    return 0;
-}
\ No newline at end of file
diff --git a/Testcases/locks.c b/Testcases/locks.c
deleted file mode 100644
index 94022f5..0000000
--- a/Testcases/locks.c
+++ /dev/null
@@ -1,21 +0,0 @@
-#include <sys/syscall.h>
-#include <unistd.h>
-#include <stdio.h>
-#include <linux/kernel.h>
-
-int main(void) {
-	long ID1, ID2, ID3;
-
-	ID2 = syscall(341);
-	printf ("syscall(341)=%ld\n", ID2);
-	ID1 = syscall(342,ID2);
-	printf ("syscall(342)=%ld\n", ID1);
-	ID1 = syscall(343,ID2);
-	printf ("syscall(343)=%ld\n", ID1);
-	ID1 = syscall(344,ID2);
-	printf ("syscall(344)=%ld\n", ID1);
-	ID1 = syscall(345);
-	printf ("syscall(345)=%ld\n", ID1);
-
-	return 0;
-}
diff --git a/Testcases/temp.txt b/Testcases/temp.txt
deleted file mode 100644
index 362d34c..0000000
--- a/Testcases/temp.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-abcd
-loki
-asad
diff --git a/Testcases/test1.c b/Testcases/test1.c
deleted file mode 100644
index 62c52ef..0000000
--- a/Testcases/test1.c
+++ /dev/null
@@ -1,32 +0,0 @@
-#include "uthread.h"
-#include <stdio.h>
-
-
-void inc_x(void *x_void_ptr)
-{
-
-	int *x_ptr = (int *)x_void_ptr;
-	while(++(*x_ptr) < 100);
-	printf("x increment finished: %d\n",*x_ptr);
-	uthread_exit();
-
-}
-
-int main()
-{
-
-	int x = 0, y = 0,pid;
-	printf("x: %d, y: %d\n", x, y);
-	pid = uthread_create(&inc_x, &x);
-
-	printf("pid: %d\n",pid);
-	while(++y < 100);
-
-	printf("y increment finished\n");
-	
-	uthread_wait();
-	printf("x: %d, y: %d\n", x, y);
-
-	return 0;
-
-}
\ No newline at end of file
diff --git a/Testcases/test2.c b/Testcases/test2.c
deleted file mode 100644
index 70c7fff..0000000
--- a/Testcases/test2.c
+++ /dev/null
@@ -1,46 +0,0 @@
-#include "uthread.h"
-#include <stdio.h>
-#include <sys/wait.h>
-
-int x;
-
-void inc_x(void *x_void_ptr)
-{
-	int *x_ptr = (int *)x_void_ptr;
-	int count = 0;
-
-	if(lock_mutex(*x_ptr)){
-		printf("error in lock_mutex\n" );;
-	}
-
-	while(++count < 100){
-		x++;
-	}
-
-	printf("x increment finished: %d\n",x);
-
-	if(unlock_mutex(*x_ptr)){
-		printf("error in unlock_mutex\n" );
-	}
-
-	uthread_exit();
-}
-
-int main()
-{
-	int y = 0, pid1, pid2;
-	int uid;
-
-	uid = init_mutex();
-
-	printf("x: %d, y: %d\n", x, y);
-
-	pid1 = uthread_create(inc_x, &uid);
-	pid2 = uthread_create(inc_x, &uid);
-	uthread_wait();
-
-	destroy_mutex(uid);
-	printf("x: %d, y: %d\n", x, y);
-
-	return 0;
-}
diff --git a/Testcases/test_create.c b/Testcases/test_create.c
deleted file mode 100644
index 6299ca2..0000000
--- a/Testcases/test_create.c
+++ /dev/null
@@ -1,25 +0,0 @@
-#include "uthread.h"
-#include <stdio.h>
-#include <stdlib.h>
-
-int G[10];
-
-int func(void * arg)
-{
-	int * P = (int *) arg;
-
-	for (int i = 0; i < 10; ++i) printf("%d\n", P[i]);
-
-	exit(0);
-}
-
-int main()
-{
-	int L[10];
-
-	for (int i = 0; i < 10; ++i) G[i] = 300 + i;
-	for (int i = 0; i < 10; ++i) L[i] = 300 + i;
-
-	uthread_create(func, L);
-	return 0;
-}
diff --git a/Testcases/uthread.h b/Testcases/uthread.h
deleted file mode 100644
index 3b547a0..0000000
--- a/Testcases/uthread.h
+++ /dev/null
@@ -1,59 +0,0 @@
-#include <unistd.h>
-
-typedef int Thread_id;
-typedef int Mutex_id;
-
-Thread_id uthread_create(void (*fn)(void *), void * arg)
-{
-	return syscall(345, fn, arg);
-}
-
-int uthread_exit(void)
-{
-	return syscall(347);
-}
-
-int uthread_wait(void)
-{
-	return syscall(346);
-}
-
-Mutex_id init_mutex(void)
-{
-	return syscall(341);
-}
-
-int lock_mutex(Mutex_id uid)
-{
-	return syscall(342, uid);
-}
-
-int unlock_mutex(Mutex_id uid)
-{
-	return syscall(343, uid);
-}
-
-int destroy_mutex(Mutex_id uid)
-{
-	return syscall(344, uid);
-}
-
-// int uthread_setpriority(void)
-// {
-// 	return syscall(348);
-// }
-
-// int uthread_getpriority(void)
-// {
-// 	return syscall(349);
-// }
-
-// int uthread_setscheduler(void)
-// {
-// 	return syscall(350);
-// }
-
-// int uthread_getscheduler(void)
-// {
-// 	return syscall(351);
-// }
diff --git a/Testcases/uthread_grep.c b/Testcases/uthread_grep.c
deleted file mode 100644
index e7d8abb..0000000
--- a/Testcases/uthread_grep.c
+++ /dev/null
@@ -1,25 +0,0 @@
-#include <stdio.h>
-#include <stdlib.h>
-#include <unistd.h>
-#include "uthread.h"
-
-int temp(void* arg)
-{
-	int count1 = 1;
-	int i;
-	for (i = 0; i < 100; ++i)
-	{
-		count1*=i;
-	}
-	uthread_exit();
-}
-
-int main()
-{
-	int count = 0 ;
-	while(count < 1000){
-		count++;
-		int pid = uthread_create(&temp,NULL);
-	}
-	uthread_wait();
-}
\ No newline at end of file
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 64dd928..e93ef0b 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -339,14 +339,6 @@
 330	common	pkey_alloc		sys_pkey_alloc
 331	common	pkey_free		sys_pkey_free
 
-341	common  create_mutex	sys_init_mutex
-342	common  lock_mutex	sys_lock_mutex
-343	common  unlock_mutex	sys_unlock_mutex
-344	common  destroy_mutex	sys_destroy_mutex
-345 common  uthread_create	sys_uthread_create
-346 common  uthread_wait	sys_uthread_wait
-347 common  uthread_exit	sys_uthread_exit
-
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation.
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 3f6d15e..f2bdb21 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1508,12 +1508,6 @@ struct tlbflush_unmap_batch {
 	bool writable;
 };
 
-struct childpid
-{
-	pid_t pid;
-	struct list_head list;
-};
-
 struct task_struct {
 #ifdef CONFIG_THREAD_INFO_IN_TASK
 	/*
@@ -1522,10 +1516,6 @@ struct task_struct {
 	 */
 	struct thread_info thread_info;
 #endif
-
-	struct list_head * uthreads;
-	struct idr * locks_map;
-
 	volatile long state;	/* -1 unrunnable, 0 runnable, >0 stopped */
 	void *stack;
 	atomic_t usage;
@@ -2012,7 +2002,6 @@ struct task_struct {
 	/* A live task holds one reference. */
 	atomic_t stack_refcount;
 #endif
-
 /* CPU-specific state of this task */
 	struct thread_struct thread;
 /*
@@ -3027,7 +3016,6 @@ extern int do_execveat(int, struct filename *,
 		       const char __user * const __user *,
 		       const char __user * const __user *,
 		       int);
-extern long _do_do_fork(unsigned long, unsigned long, unsigned long, int __user *, int __user *, unsigned long, unsigned long *);
 extern long _do_fork(unsigned long, unsigned long, unsigned long, int __user *, int __user *, unsigned long);
 extern long do_fork(unsigned long, unsigned long, unsigned long, int __user *, int __user *);
 struct task_struct *fork_idle(int);
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 0bccadd..91a740f 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -79,6 +79,7 @@ union bpf_attr;
 #include <linux/quota.h>
 #include <linux/key.h>
 #include <trace/syscall.h>
+
 /*
  * __MAP - apply a macro to syscall arguments
  * __MAP(n, m, t1, a1, t2, a2, ..., tn, an) will expand to
@@ -902,13 +903,4 @@ asmlinkage long sys_pkey_mprotect(unsigned long start, size_t len,
 asmlinkage long sys_pkey_alloc(unsigned long flags, unsigned long init_val);
 asmlinkage long sys_pkey_free(int pkey);
 
-
-asmlinkage long sys_init_mutex(void);
-asmlinkage long sys_lock_mutex(int uid);
-asmlinkage long sys_unlock_mutex(int uid);
-asmlinkage long sys_destroy_mutex(int uid);
-asmlinkage long sys_uthread_create(void (*fn)(void *), void * arg);
-asmlinkage long sys_uthread_wait(void);
-asmlinkage long sys_uthread_exit(void);
-
 #endif
diff --git a/kernel/fork.c b/kernel/fork.c
index e25e330..11c5c8a 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -83,7 +83,6 @@
 #include <asm/mmu_context.h>
 #include <asm/cacheflush.h>
 #include <asm/tlbflush.h>
-#include <asm/processor.h>
 
 #include <trace/events/sched.h>
 
@@ -1905,28 +1904,18 @@ struct task_struct *fork_idle(int cpu)
 	return task;
 }
 
-long _do_fork(unsigned long clone_flags,
-	      unsigned long stack_start,
-	      unsigned long stack_size,
-	      int __user *parent_tidptr,
-	      int __user *child_tidptr,
-	      unsigned long tls)
-{
-	return _do_do_fork(clone_flags, stack_start, stack_size, parent_tidptr, child_tidptr, tls, NULL);
-}
-
 /*
  *  Ok, this is the main fork-routine.
  *
  * It copies the process, and if successful kick-starts
  * it and waits for it to finish using the VM if required.
  */
-long _do_do_fork(unsigned long clone_flags,
+long _do_fork(unsigned long clone_flags,
 	      unsigned long stack_start,
 	      unsigned long stack_size,
 	      int __user *parent_tidptr,
 	      int __user *child_tidptr,
-	      unsigned long tls, unsigned long * uthread_ptrs)
+	      unsigned long tls)
 {
 	struct task_struct *p;
 	int trace = 0;
@@ -1953,25 +1942,6 @@ long _do_do_fork(unsigned long clone_flags,
 	p = copy_process(clone_flags, stack_start, stack_size,
 			 child_tidptr, NULL, trace, tls, NUMA_NO_NODE);
 	add_latent_entropy();
-
-	/*** If user-thread ***/
-
-	if(uthread_ptrs != NULL)
-	{
-		struct pt_regs * childregs;
-		struct childpid * cpid;
-
-		childregs = task_pt_regs(p);
-		childregs->ip = uthread_ptrs[0];
-		childregs->di = uthread_ptrs[1];
-		kfree(uthread_ptrs);
-
-		cpid = kmalloc(sizeof(struct childpid), GFP_KERNEL);
-		cpid->pid = p->pid;
-		INIT_LIST_HEAD(&cpid->list);
-		list_add(&cpid->list, current->uthreads);
-	}
-
 	/*
 	 * Do this prior waking up the new thread - the thread pointer
 	 * might get invalid after that point, if the thread exits quickly.
diff --git a/uthreads/.gitignore b/uthreads/.gitignore
deleted file mode 100644
index 56a7b5d..0000000
--- a/uthreads/.gitignore
+++ /dev/null
@@ -1,6 +0,0 @@
-#
-# generated files
-#
-modules*
-*.cmd
-!.gitignore
\ No newline at end of file
diff --git a/uthreads/Makefile b/uthreads/Makefile
deleted file mode 100644
index cb38049..0000000
--- a/uthreads/Makefile
+++ /dev/null
@@ -1 +0,0 @@
-obj-y:=locks.o uthread.o
\ No newline at end of file
diff --git a/uthreads/locks.c b/uthreads/locks.c
deleted file mode 100644
index 2ab11af..0000000
--- a/uthreads/locks.c
+++ /dev/null
@@ -1,61 +0,0 @@
-#include <linux/kernel.h>
-#include <linux/syscalls.h>
-#include <linux/mutex.h>
-#include <linux/idr.h>	
-#include <linux/slab.h>
-
-asmlinkage long sys_init_mutex()
-{
-	struct mutex * ulock;
-	int uid;
-
-	printk(KERN_INFO "sys_init_mutex called.\n");
-
-	if(current->locks_map == NULL)
-	{
-		current->locks_map = kmalloc(sizeof(struct idr), GFP_KERNEL);
-		idr_init(current->locks_map);
-	}
-
-	ulock = kmalloc(sizeof(struct mutex),GFP_KERNEL);
-	mutex_init(ulock);
-	uid = idr_alloc(current->locks_map, ulock, 1, 100, GFP_KERNEL);
-	return uid;
-}
-
-asmlinkage long sys_lock_mutex(int uid)
-{
-	struct mutex * umutex;
-
-	printk(KERN_INFO "sys_lock_mutex called.\n");
-	umutex = idr_find(current->locks_map, uid);
-	if(!umutex)
-		return -EINVAL; 
-	mutex_lock(umutex);
-	return 0;
-}
-
-asmlinkage long sys_unlock_mutex(int uid)
-{
-	struct mutex * umutex;
-
-	printk(KERN_INFO "sys_unlock_mutex called.\n");
-	umutex = idr_find(current->locks_map, uid);
-	if(!umutex)
-		return -EINVAL;
-	mutex_unlock(umutex);
-	return 0;
-}
-
-asmlinkage long sys_destroy_mutex(int uid)
-{
-	struct mutex * umutex;
-
-	printk(KERN_INFO "sys_destroy_mutex called.\n");
-	umutex = idr_find(current->locks_map, uid);
-	if(!umutex)
-		return -EINVAL;
-	idr_remove(current->locks_map, uid);
-	kfree(umutex);
-	return 0;
-}
diff --git a/uthreads/uthread.c b/uthreads/uthread.c
deleted file mode 100644
index e610e1f..0000000
--- a/uthreads/uthread.c
+++ /dev/null
@@ -1,56 +0,0 @@
-#include <linux/kernel.h>
-#include <linux/syscalls.h>
-#include <linux/slab.h>
-
-#define STACK_SZ 2 * 1024 * 1024
-
-asmlinkage long sys_uthread_create(void (*fn)(void *), void * arg)
-{
-	unsigned long stack_ptr;
-	unsigned long * uthread_ptrs;
-
-	printk(KERN_INFO "sys_uthread_create called.\n");
-
-	if(current->uthreads == NULL)
-	{
-		current->uthreads = kmalloc(sizeof(struct list_head), GFP_KERNEL);
-		INIT_LIST_HEAD(current->uthreads);
-	}
-
-	stack_ptr = sys_brk(0);
-	stack_ptr = sys_brk(stack_ptr + STACK_SZ);
-
-	uthread_ptrs = kmalloc(2 * sizeof(unsigned long), GFP_KERNEL);
-	uthread_ptrs[0] = (unsigned long) fn;
-	uthread_ptrs[1] = (unsigned long) arg;
-
-	return _do_do_fork(SIGCHLD | CLONE_FILES | CLONE_FS | CLONE_VM | CLONE_SIGHAND, stack_ptr, STACK_SZ, NULL, NULL, 0, uthread_ptrs);
-}
-
-asmlinkage long sys_uthread_wait(void)
-{
-	struct childpid * cpid, * next;
-
-	if(current->uthreads != NULL)
-	{
-		list_for_each_entry_safe(cpid, next, current->uthreads, list)
-		{
-			sys_wait4(cpid->pid, 0, 0, NULL);
-			kfree(cpid);
-		}
-
-		kfree(current->uthreads);
-		current->uthreads = NULL;
-	}
-
-	printk(KERN_INFO "sys_uthread_wait called.\n");
-
-	return 0;
-}
-
-asmlinkage long sys_uthread_exit(void)
-{
-	printk(KERN_INFO "sys_uthread_exit called.\n");
-	do_exit((0&0xff)<<8);
-	return -1;
-}
